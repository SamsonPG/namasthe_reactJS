
Running Notes of @akshaymarch7  's session on 01-01-2023:

Writing Scripts in package.json.

*Q. What converts New Code to Older Code(For older version Browsers)? 
A: Babel 
We do not need to write polyfill. Babel does it automatically.

npx - executing commands without downloading packages
npm - will download required packages

Note: Parcel will not remove console.log automatically. We need to configure for it. There is a package for it, named 'babel-plugin-transform-remove-console' either from babel website or npmjs website: npm install babel-plugin-transform-remove-console --save-dev /-D

Usage: 1.via .babelrc (recommended)
    2. via CLI
    3. via NodeAPI

React-key Reconciliation :
When there are siblings in an array, we need to give keys for each sibling
HW: Read about React-key Reconciliation from React Docs.

React.createElement gives us an Object, which is then converted to html and puts into DOM
JSX uses React.createElement (behind the scenes), which gives Object, and then into HTML, and it is put into DOM
Babel does it. Babel converts JSX. JSX was developed by Facebook.
Babel is must to use JSX.

Q. Is JSX HTML inside JS? No. 
A: JSX is a HTML like Syntax, and not HTML inside JS.

Babel: Compiler for JS.
Read Babel Docs: babeljs.io
Play with Babel in it's website.
Babel comes along with Parcel.

Also Go to it's GitHub Repo, and read about its algorithms.

React Component:
2 Types:
1. Functional Component- NEW
2. Class Based Component - OLD

Functional Comp is just a normal function that returns some piece of JSX, or a react element, or a function. 

Name of a Component starts with a Capital Letter (not mandatory, but good practice to use)

If we have to write multiple lines to be returned in a component, we need to use ()and ; at the end.

 For Homework, use Normal Convention.

Continued... Part 2

Hope it was Helpful ??
Notes Part 2:

Diff b/n React Element & React Component:

React Element is returning an Object.
React Component is a function that returns JSX, or a react element, or a function.

Syntax When rendering:
For React Element, We use root.render(element_name);
For React Component, We use Angular brackets: root.render(<ComponentName />);

 Any piece of Javascript code can be written within {} 

XSS - Cross site scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website. Attackers often initiate an XSS attack by sending a malicious link to a user and enticing the user to click it.

JSX takes care of XSS.

*Interview Q: Component Composition:
A: Writing/ Passing component inside component.

Home Work:
1. Read about React-key Reconciliation from React Docs.
2. Do Whatever Akshay did in the Session.

*

Hope it was Helpful ??

////////////////////////////////////////////////

Topics
JSX
JSX is a syntax extension for JavaScript that allows us to write HTML-like code within JavaScript.
It provides a more readable and concise way to create React elements and render them to the DOM.
React.createElement vs JSX
React.createElement is a method provided by React to create React elements programmatically using JavaScript objects.
JSX is a syntactic sugar that simplifies the process of creating React elements by allowing developers to write HTML-like code directly in JavaScript.
Benefits of JSX
JSX improves code readability and maintainability by allowing developers to write declarative UI components.
It enables developers to use familiar HTML syntax within JavaScript, making it easier to reason about the structure of UI components.
JSX provides compile-time checks and better error messages, helping catch syntax errors early in the development process.
Behind the Scenes of JSX
JSX code is transpiled into standard JavaScript code by tools like Babel.
Babel converts JSX syntax into React.createElement calls before it's executed by the JavaScript engine.
This allows browsers to understand and render JSX code as regular JavaScript.
Babel & Parcel role in JSX
Babel is a JavaScript compiler that transforms JSX and other modern JavaScript features into backward-compatible code.
Parcel is a web application bundler that can automatically compile JSX code using Babel and package all the necessary assets for deployment.
Components
Components are the building blocks of React applications, encapsulating UI elements and their behavior into reusable and composable units.
Functional components are JavaScript functions that return JSX elements, while class components are ES6 classes that extend React.Component and have a render method.
Functional Components
Functional components are simple JavaScript functions that return JSX elements.
They are stateless and pure, meaning they do not manage their own state or have lifecycle methods.
Functional components are typically used for presentational or stateless components.
Composing Components
Composing components involves combining multiple smaller components to create more complex UI elements.
This allows for a modular and reusable approach to building UIs, where each component is responsible for a specific piece of functionality or visual representation.

///////////////////////////////////////////////////////////

Assignment
What is JSX?
JSX is a syntax extension for JavaScript that allows developers to write HTML-like code within JavaScript.
Example:
jsx
Copy code
const element = <h1>Hello, JSX!</h1>;
Superpowers of JSX
JSX improves code readability and maintainability by providing a more declarative syntax for creating UI components.
It enables the use of JavaScript expressions within curly braces {} to dynamically generate content.
JSX provides compile-time checks and better error messages, enhancing developer productivity and reducing bugs.
Role of type attribute in script tag? What options can I use there?
The type attribute in the script tag specifies the media type of the script resource.
Common values for the type attribute include:
"text/javascript": Indicates that the content of the script is JavaScript code.
"module": Indicates that the script is a module script, which allows for better encapsulation and dependency management.
{TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX
{TitleComponent}: This syntax represents a reference to a component, which can be used as a variable or passed as a prop to another component.
{<TitleComponent/>}: This syntax creates an instance of the TitleComponent component using JSX self-closing syntax.
{<TitleComponent></TitleComponent>}: This syntax creates an instance of the TitleComponent component using JSX opening and closing tags.
Coding Assignment
jsx
Copy code
// Create a Nested header Element using React.createElement
const nestedHeader = React.createElement('div', { className: 'title' },
    React.createElement('h1', null, 'Heading 1'),
    React.createElement('h2', null, 'Heading 2'),
    React.createElement('h3', null, 'Heading 3')
);

// Create the same element using JSX
const jsxNestedHeader = (
    <div className="title">
        <h1>Heading 1</h1>
        <h2>Heading 2</h2>
        <h3>Heading 3</h3>
    </div>
);

// Create a functional component of the same with JSX
const NestedHeaderComponent = () => (
    <div className="title">
        <h1>Heading 1</h1>
        <h2>Heading 2</h2>
        <h3>Heading 3</h3>
    </div>
);

// Pass attributes into the tag in JSX
const HeaderWithAttributes = ({ title }) => (
    <div className="title">
        <h1>{title}</h1>
    </div>
);

// Composition of Component (Add a component inside another)
const ParentComponent = () => (
    <div>
        <ChildComponent />
    </div>
);

// Create a Header Component from scratch using Functional Components with JSX
const HeaderComponent = () => (
    <div className="header">
        <img src="logo.png" alt="Logo" />
        <input type="text" placeholder="Search..." />
        <img src="user-icon.png" alt="User Icon" />
    </div>
);
In the above code:

We create nested header elements using React.createElement and JSX.
We define a functional component using JSX syntax.
We demonstrate passing attributes into JSX elements.
We compose components by embedding one component inside another.
We create a header component with a logo, search bar, and user icon.